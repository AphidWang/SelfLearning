diff --git a/apps/client/src/pages/student/TaskWallPage.tsx b/apps/client/src/pages/student/TaskWallPage.tsx
index c2b741e..f664938 100644
--- a/apps/client/src/pages/student/TaskWallPage.tsx
+++ b/apps/client/src/pages/student/TaskWallPage.tsx
@@ -36,6 +36,8 @@ import { DailyJournalDialog } from './components/DailyJournalDialog';
 import { TaskRecordDialog } from './components/TaskRecordDialog';
 import { TopicReviewPage } from '../../components/topic-review/TopicReviewPage';
 import { TopicTemplateBrowser } from '../../components/template/TopicTemplateBrowser';
+import { TopicGrid, TopicCard, CreateTopicCard, TopicCardData } from './components/TopicCards';
+import { StarCounter, CompletedTasksDialog, CutePromptDialog } from './components/SharedDialogs';
 import type { Topic, Goal, Task, TaskStatus } from '../../types/goal';
 import { SPECIAL_TASK_FLAGS, hasWeeklyQuickChallenge } from '../../types/goal';
 import { LoadingDots } from '../../components/shared/LoadingDots';
@@ -85,1440 +87,22 @@ interface GoalWithContext extends Goal {
   subjectStyle: any;
 }
 
-/**
- * 主題卡片數據介面
- */
-interface TopicCardData {
-  topic: Topic;
-  subjectStyle: any;
-  totalGoals: number;
-  completedGoals: number;
-  totalTasks: number;
-  completedTasks: number;
-  inProgressTasks: number;
-  needHelpCount: number;
-  collaborators: any[];
-  overallProgress: number;
-}
-
-/**
- * 星星計數器組件 - 彩色星星設計
- */
-interface StarCounterProps {
-  count: number;
-  isAnimating?: boolean;
-  onClick?: () => void;
-}
-
-const StarCounter: React.FC<StarCounterProps> = ({ count, isAnimating = false, onClick }) => {
-  // 十種彩色星星顏色
-  const starColors = [
-    '#FF6B6B', // 紅
-    '#4ECDC4', // 青
-    '#45B7D1', // 藍
-    '#96CEB4', // 綠
-    '#FECA57', // 黃
-    '#FF9FF3', // 粉
-    '#A8E6CF', // 淺綠
-    '#FFB74D', // 橙
-    '#CE93D8', // 紫
-    '#81C784'  // 深綠
-  ];
-
-  // 計算彩虹星星數量 (每10個一顆)
-  const rainbowStars = Math.floor(count / 10);
-  // 計算剩餘彩色星星數量
-  const coloredStars = count % 10;
-
-  const renderStars = () => {
-    const stars: JSX.Element[] = [];
-    
-    // 彩虹/金色星星 (大)
-    for (let i = 0; i < rainbowStars; i++) {
-      stars.push(
-        <motion.div
-          key={`rainbow-${i}`}
-          animate={isAnimating ? { 
-            rotate: [0, 360],
-            scale: [1, 1.5, 1]
-          } : {}}
-          transition={{ duration: 0.8, ease: "easeInOut", delay: i * 0.1 }}
-        >
-          <Star 
-            className="w-7 h-7 fill-yellow-400 text-yellow-400 drop-shadow-lg" 
-            style={{
-              filter: 'drop-shadow(0 0 8px rgba(255, 215, 0, 0.8))'
-            }}
-          />
-        </motion.div>
-      );
-    }
-    
-    // 彩色星星 (小) - 上五下四排列，顯示在大星星右邊
-    const topRowCount = Math.min(5, coloredStars);
-    const bottomRowCount = coloredStars - topRowCount;
-    
-    return (
-      <div className="flex items-center gap-2">
-        {/* 彩虹星星區域 */}
-        {rainbowStars > 0 && (
-          <div className="flex gap-1">
-            {stars}
-          </div>
-        )}
-        
-        {/* 彩色星星區域 - 右邊 */}
-        {coloredStars > 0 && (
-          <div className="flex flex-col gap-1">
-            {/* 上排彩色星星 */}
-            {topRowCount > 0 && (
-              <div className="flex gap-1 justify-center">
-                {Array.from({ length: topRowCount }).map((_, i) => (
-                  <motion.div
-                    key={`colored-top-${i}`}
-                    animate={isAnimating ? { 
-                      rotate: [0, 360],
-                      scale: [1, 1.3, 1]
-                    } : {}}
-                    transition={{ duration: 0.6, ease: "easeInOut", delay: (rainbowStars * 0.1) + (i * 0.1) }}
-                  >
-                    <Star 
-                      className="w-5 h-5 drop-shadow-sm" 
-                      style={{
-                        color: starColors[i],
-                        fill: starColors[i],
-                        filter: `drop-shadow(0 0 4px ${starColors[i]}80)`
-                      }}
-                    />
-                  </motion.div>
-                ))}
-              </div>
-            )}
-            
-            {/* 下排彩色星星 */}
-            {bottomRowCount > 0 && (
-              <div className="flex gap-1 justify-center">
-                {Array.from({ length: bottomRowCount }).map((_, i) => (
-                  <motion.div
-                    key={`colored-bottom-${i}`}
-                    animate={isAnimating ? { 
-                      rotate: [0, 360],
-                      scale: [1, 1.3, 1]
-                    } : {}}
-                    transition={{ duration: 0.6, ease: "easeInOut", delay: (rainbowStars * 0.1) + ((i + topRowCount) * 0.1) }}
-                  >
-                    <Star 
-                      className="w-5 h-5 drop-shadow-sm" 
-                      style={{
-                        color: starColors[i + topRowCount],
-                        fill: starColors[i + topRowCount],
-                        filter: `drop-shadow(0 0 4px ${starColors[i + topRowCount]}80)`
-                      }}
-                    />
-                  </motion.div>
-                ))}
-              </div>
-            )}
-          </div>
-        )}
-      </div>
-    );
-  };
-
-  return (
-    <motion.button 
-      className="flex items-center gap-2 p-3 rounded-xl hover:bg-amber-50 transition-all duration-300 cursor-pointer group"
-      animate={isAnimating ? { scale: [1, 1.15, 1] } : {}}
-      transition={{ duration: 0.6, ease: "easeInOut" }}
-      onClick={onClick}
-      title="點擊查看完成收藏"
-    >
-      <div className="flex items-center">
-        {renderStars()}
-      </div>
-      <motion.span 
-        className="text-xl font-bold text-amber-700 ml-2"
-        key={count} // 重新渲染動畫
-        initial={isAnimating ? { scale: 2, color: "#F59E0B" } : false}
-        animate={{ scale: 1, color: "#B45309" }}
-        transition={{ duration: 0.5, type: "spring", bounce: 0.5 }}
-      >
-        {count}
-      </motion.span>
-      <motion.div
-        className="text-amber-600 opacity-0 group-hover:opacity-100 transition-opacity"
-        animate={isAnimating ? { rotate: [0, 10, -10, 0] } : {}}
-      >
-        ✨
-      </motion.div>
-    </motion.button>
-  );
-};
-
-/**
- * 完成任務 Dialog 組件
- */
-interface CompletedTasksDialogProps {
-  isOpen: boolean;
-  onClose: () => void;
-  completedTasks: TaskWithContext[];
-  onRestoreTask: (taskId: string, goalId: string, topicId: string) => Promise<void>;
-  onClearStack: () => void;
-}
-
-const CompletedTasksDialog: React.FC<CompletedTasksDialogProps> = ({
-  isOpen,
-  onClose,
-  completedTasks,
-  onRestoreTask,
-  onClearStack
-}) => {
-  if (!isOpen) return null;
-
-  return (
-    <AnimatePresence>
-      <motion.div
-        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
-        initial={{ opacity: 0 }}
-        animate={{ opacity: 1 }}
-        exit={{ opacity: 0 }}
-        onClick={onClose}
-      >
-        <motion.div
-          className="bg-white rounded-2xl shadow-2xl border border-amber-200 p-6 w-full max-w-2xl max-h-[80vh] overflow-hidden"
-          initial={{ opacity: 0, scale: 0.9, y: 20 }}
-          animate={{ opacity: 1, scale: 1, y: 0 }}
-          exit={{ opacity: 0, scale: 0.9, y: 20 }}
-          onClick={(e) => e.stopPropagation()}
-        >
-          {/* 標題區域 */}
-          <div className="flex items-center justify-between mb-6">
-            <div className="flex items-center gap-3">
-              <div className="p-3 bg-gradient-to-r from-amber-100 to-yellow-100 rounded-xl">
-                <Star className="w-6 h-6 text-amber-600" />
-              </div>
-              <div>
-                <h3 className="text-xl font-bold text-gray-800">🎉 完成收藏</h3>
-                <p className="text-sm text-gray-600">
-                  恭喜你完成了 {completedTasks.length} 個任務！
-                </p>
-              </div>
-            </div>
-            
-            <button
-              onClick={onClose}
-              className="p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors"
-            >
-              <X className="w-5 h-5" />
-            </button>
-          </div>
-
-          {/* 任務列表 */}
-          <div className="space-y-3 max-h-96 overflow-y-auto">
-            {completedTasks.length === 0 ? (
-              <div className="text-center py-12">
-                <div className="text-4xl mb-2">🌟</div>
-                <p className="text-gray-500">還沒有完成的任務</p>
-                <p className="text-sm text-gray-400">完成任務後會出現在這裡</p>
-              </div>
-            ) : (
-              completedTasks.map((task, index) => (
-                <motion.div
-                  key={task.id}
-                  className="bg-gradient-to-r from-amber-50 to-yellow-50 border border-amber-200 rounded-xl p-4 hover:shadow-md transition-all"
-                  initial={{ opacity: 0, x: 20 }}
-                  animate={{ opacity: 1, x: 0 }}
-                  transition={{ delay: index * 0.05 }}
-                >
-                  <div className="flex items-center justify-between">
-                    <div className="flex-1">
-                      <div className="flex items-center gap-2 mb-2">
-                        <div 
-                          className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium"
-                          style={{ 
-                            backgroundColor: task.subjectStyle.accent + '20',
-                            color: task.subjectStyle.accent
-                          }}
-                        >
-                          {task.topicTitle}
-                        </div>
-                        <Star className="w-4 h-4 text-amber-500" />
-                      </div>
-                      
-                      <h4 className="text-lg font-bold text-gray-800 mb-1">
-                        {task.title}
-                      </h4>
-                      
-                      <p className="text-sm text-gray-600 mb-2">
-                        目標：{task.goalTitle}
-                      </p>
-                      
-                      {task.completed_at && (
-                        <p className="text-xs text-gray-500">
-                          完成於 {new Date(task.completed_at).toLocaleDateString('zh-TW', {
-                            year: 'numeric',
-                            month: 'long',
-                            day: 'numeric',
-                            hour: '2-digit',
-                            minute: '2-digit'
-                          })}
-                        </p>
-                      )}
-                    </div>
-                    
-                    <button
-                      onClick={() => onRestoreTask(task.id, task.goalId, task.topicId)}
-                      className="ml-4 p-3 text-blue-600 hover:bg-blue-100 rounded-xl transition-colors flex-shrink-0 group"
-                      title="恢復到進行中"
-                    >
-                      <RotateCcw className="w-5 h-5 group-hover:rotate-12 transition-transform" />
-                    </button>
-                  </div>
-                </motion.div>
-              ))
-            )}
-          </div>
-        </motion.div>
-      </motion.div>
-    </AnimatePresence>
-  );
-};
-
-/**
- * 溫馨提示 Dialog 組件
- */
-interface CutePromptDialogProps {
-  isOpen: boolean;
-  onClose: () => void;
-  onConfirm: () => void;
-  title: string;
-  message: string;
-}
-
-const CutePromptDialog: React.FC<CutePromptDialogProps> = ({
-  isOpen,
-  onClose,
-  onConfirm,
-  title,
-  message
-}) => {
-  if (!isOpen) return null;
-
-  return (
-    <AnimatePresence>
-      <motion.div
-        className="fixed inset-0 bg-black/30 backdrop-blur-sm z-50 flex items-center justify-center p-4"
-        initial={{ opacity: 0 }}
-        animate={{ opacity: 1 }}
-        exit={{ opacity: 0 }}
-      >
-        <motion.div
-          className="bg-white rounded-3xl shadow-2xl border-2 border-amber-200 p-8 w-full max-w-md text-center"
-          initial={{ opacity: 0, scale: 0.8, y: 30 }}
-          animate={{ opacity: 1, scale: 1, y: 0 }}
-          exit={{ opacity: 0, scale: 0.8, y: 30 }}
-          transition={{ type: "spring", damping: 20, stiffness: 300 }}
-        >
-          {/* 可愛表情 */}
-          <motion.div
-            className="text-6xl mb-4"
-            animate={{ 
-              rotate: [0, -10, 10, -10, 0],
-              scale: [1, 1.1, 1]
-            }}
-            transition={{ 
-              rotate: { duration: 0.8, repeat: Infinity, repeatDelay: 2 },
-              scale: { duration: 0.5, repeat: Infinity, repeatDelay: 3 }
-            }}
-          >
-            🤗
-          </motion.div>
-
-          {/* 標題 */}
-          <h3 className="text-2xl font-bold text-amber-800 mb-3">
-            {title}
-          </h3>
-
-          {/* 訊息 */}
-          <p className="text-gray-600 mb-6 leading-relaxed">
-            {message}
-          </p>
-
-          {/* 按鈕區域 */}
-          <div className="flex gap-3 justify-center">
-            <motion.button
-              onClick={onClose}
-              className="px-6 py-3 bg-gray-100 text-gray-600 rounded-2xl font-medium hover:bg-gray-200 transition-colors"
-              whileHover={{ scale: 1.05 }}
-              whileTap={{ scale: 0.95 }}
-            >
-              等等再說
-            </motion.button>
-            <motion.button
-              onClick={onConfirm}
-              className="px-6 py-3 bg-gradient-to-r from-amber-400 to-orange-400 text-white rounded-2xl font-medium hover:from-amber-500 hover:to-orange-500 transition-all shadow-lg"
-              whileHover={{ scale: 1.05 }}
-              whileTap={{ scale: 0.95 }}
-            >
-              好的！記錄一下 ✨
-            </motion.button>
-          </div>
-        </motion.div>
-      </motion.div>
-    </AnimatePresence>
-  );
-};
-
-/**
- * 主題卡片組件
- */
-interface TopicCardProps {
-  data: TopicCardData;
-  onClick: (topicId: string) => void;
-  isLoading?: boolean;
-}
-
-const TopicCard: React.FC<TopicCardProps> = ({ data, onClick, isLoading }) => {
-  const { topic, subjectStyle, totalGoals, completedGoals, totalTasks, completedTasks, inProgressTasks, needHelpCount, collaborators, overallProgress } = data;
-
-  // 根據目標狀態決定圖標
-  const getStatusIcon = () => {
-    if (overallProgress === 100) return CheckCircle2;
-    if (inProgressTasks > 0) return Play;
-    if (totalTasks === 0) return Target;
-    return Clock;
-  };
 
-  const StatusIcon = getStatusIcon();
 
-  return (
-    <motion.div
-      className="group cursor-pointer relative"
-      onClick={() => onClick(topic.id)}
-      whileHover={{ y: -3, scale: 1.01 }}
-      whileTap={{ scale: 0.98 }}
-      transition={{ 
-        type: "spring",
-        stiffness: 400,
-        damping: 30,
-        mass: 1
-      }}
-    >
-      {isLoading && (
-        <div className="absolute inset-0 flex items-center justify-center z-10">
-          <LoadingDots />
-        </div>
-      )}
-      <div 
-        className={`bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg border-2 p-6 h-[320px] flex flex-col transition-all duration-300 hover:shadow-2xl ${
-          isLoading ? 'opacity-90' : ''
-        }`}
-        style={{ 
-          borderColor: subjectStyle.accent + '40',
-          boxShadow: `0 10px 30px ${subjectStyle.accent}15, 0 0 0 1px ${subjectStyle.accent}20`
-        }}
-      >
-        {/* 頂部標題區 */}
-        <div className="flex items-start justify-between mb-3">
-          <div className="flex-1">
-            <div className="flex items-center gap-2 mb-2">
-              <div className="flex items-center gap-2 flex-wrap">
-                <div 
-                  className="px-3 py-1 rounded-full text-xs font-medium"
-                  style={{ 
-                    backgroundColor: subjectStyle.accent + '20',
-                    color: subjectStyle.accent
-                  }}
-                >
-                  {topic.subject || '未分類'}
-                </div>
-                {topic.is_collaborative && (
-                  <div className="flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-600 rounded-full text-xs">
-                    <Users className="w-3 h-3" />
-                    協作
-                  </div>
-                )}
-                {/* 協作者頭像移到這裡 */}
-                {topic.is_collaborative && collaborators.length > 0 && (
-                  <div className="flex items-center gap-1">
-                    <div className="flex -space-x-2">
-                      {collaborators.slice(0, 3).map((collaborator, index) => (
-                        <div
-                          key={collaborator.id}
-                          className="w-5 h-5 rounded-full border-2 border-white bg-gradient-to-r from-blue-400 to-purple-400 flex items-center justify-center text-white text-[10px] font-bold"
-                          style={{ zIndex: 10 - index }}
-                        >
-                          {collaborator.name?.charAt(0) || '?'}
-                        </div>
-                      ))}
-                      {collaborators.length > 3 && (
-                        <div className="w-5 h-5 rounded-full border-2 border-white bg-gray-400 flex items-center justify-center text-white text-[10px] font-bold">
-                          +{collaborators.length - 3}
-                        </div>
-                      )}
-                    </div>
-                  </div>
-                )}
-              </div>
-            </div>
-            <h3 className="text-xl font-bold text-gray-800 line-clamp-2 leading-tight">
-              {topic.title}
-            </h3>
-          </div>
-          <div className="flex-shrink-0 ml-3">
-            <StatusIcon 
-              className="w-6 h-6" 
-              style={{ color: subjectStyle.accent }}
-            />
-          </div>
-        </div>
 
-        {/* 中央進度環 */}
-        <div className="flex-1 flex items-center justify-center my-3">
-          <div className="relative">
-            {/* 外圈 */}
-            <svg className="w-24 h-24 transform -rotate-90" viewBox="0 0 96 96">
-              <circle
-                cx="48"
-                cy="48"
-                r="40"
-                stroke={subjectStyle.accent + '20'}
-                strokeWidth="8"
-                fill="none"
-              />
-              <circle
-                cx="48"
-                cy="48"
-                r="40"
-                stroke={subjectStyle.accent}
-                strokeWidth="8"
-                fill="none"
-                strokeLinecap="round"
-                strokeDasharray={`${overallProgress * 2.51} 251.2`}
-                style={{
-                  transition: 'stroke-dasharray 0.5s ease-in-out'
-                }}
-              />
-            </svg>
-            {/* 中央百分比 */}
-            <div className="absolute inset-0 flex items-center justify-center">
-              <span className="text-2xl font-bold text-gray-800">
-                {Math.round(overallProgress)}%
-              </span>
-            </div>
-          </div>
-        </div>
-
-        {/* 底部統計資訊 */}
-        <div className="space-y-2">
-          <div className="flex items-center justify-between text-sm">
-            <div className="flex items-center gap-1 text-gray-600">
-              <Flag className="w-4 h-4" />
-              <span>{completedGoals}/{totalGoals} 目標</span>
-            </div>
-            <div className="flex items-center gap-1 text-gray-600">
-              <Target className="w-4 h-4" />
-              <span>{completedTasks}/{totalTasks} 任務</span>
-            </div>
-          </div>
 
-          {/* 進行中任務和需要幫助 */}
-          <div className="flex items-center justify-between">
-            {inProgressTasks > 0 && (
-              <div 
-                className="flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium"
-                style={{ 
-                  backgroundColor: subjectStyle.accent + '20',
-                  color: subjectStyle.accent
-                }}
-              >
-                <Play className="w-3 h-3" />
-                {inProgressTasks} 進行中
-              </div>
-            )}
-            
-            {needHelpCount > 0 && (
-              <motion.div 
-                className="flex items-center gap-1 px-2 py-1 bg-orange-100 text-orange-600 rounded-full text-xs font-medium"
-                animate={{ scale: [1, 1.05, 1] }}
-                transition={{ duration: 2, repeat: Infinity }}
-              >
-                ⚠️ {needHelpCount} 需要幫助
-              </motion.div>
-            )}
-          </div>
-        </div>
-      </div>
-    </motion.div>
-  );
-};
-
-/**
- * 主題網格組件
- */
-interface TopicGridProps {
-  topics: TopicCardData[];
-  onTopicClick: (topicId: string) => void;
-  onCreateTopicClick: () => void;
-  isLoading?: boolean;
-  isViewModeChanging?: boolean;
-  loadingTopicId: string | null;
-}
-
-const TopicGrid: React.FC<TopicGridProps> = ({ topics, onTopicClick, onCreateTopicClick, isLoading, isViewModeChanging, loadingTopicId }) => {
-  if (isLoading || isViewModeChanging) {
-    return (
-      <div className="flex items-center justify-center min-h-[200px]">
-        <LoadingDots 
-          colors={['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57']}
-          size={8}
-          minLoadingTime={500}
-        />
-      </div>
-    );
-  }
-
-  return (
-    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 w-full">
-      {topics.map((topicData, index) => (
-        <motion.div
-          key={topicData.topic.id}
-          initial={{ opacity: 0, y: 10, scale: 0.95 }}
-          animate={{ opacity: 1, y: 0, scale: 1 }}
-          transition={{ 
-            duration: 0.2, 
-            delay: index * 0.05,
-            type: "spring",
-            stiffness: 400,
-            damping: 25
-          }}
-        >
-          <TopicCard 
-            data={topicData} 
-            onClick={onTopicClick}
-            isLoading={topicData.topic.id === loadingTopicId}
-          />
-        </motion.div>
-      ))}
-      
-      {/* 建立新主題卡片 */}
-      <motion.div
-        initial={{ opacity: 0, y: 10, scale: 0.95 }}
-        animate={{ opacity: 1, y: 0, scale: 1 }}
-        transition={{ 
-          duration: 0.2, 
-          delay: topics.length * 0.05,
-          type: "spring",
-          stiffness: 400,
-          damping: 25
-        }}
-      >
-        <CreateTopicCard 
-          onClick={onCreateTopicClick}
-          isLoading={false}
-        />
-      </motion.div>
-    </div>
-  );
-};
-
-/**
- * 本週挑戰卡片組件
- */
-interface WeeklyChallengeCardProps {
-  challenge: {
-    title: string;
-    completedDays: string[];
-    startDate: string;
-  } | null;
-  onCheckIn: () => void;
-  onCancelCheckIn: () => void;
-  onEdit: () => void;
-  onSetChallenge: () => void;
-  onMigrate: () => void;
-  editingChallenge: boolean;
-  challengeInput: string;
-  setChallengeInput: (value: string) => void;
-  setEditingChallenge: (value: boolean) => void;
-  getTaiwanDateString: () => string;
-}
-
-const WeeklyChallengeCard: React.FC<WeeklyChallengeCardProps> = ({ 
-  challenge, 
-  onCheckIn, 
-  onCancelCheckIn,
-  onEdit, 
-  onSetChallenge,
-  onMigrate,
-  editingChallenge,
-  challengeInput,
-  setChallengeInput,
-  setEditingChallenge,
-  getTaiwanDateString
-}) => {
-  const [showCancelConfirm, setShowCancelConfirm] = useState(false);
-  
-  const today = getTaiwanDateString();
-  const isCheckedToday = challenge?.completedDays.includes(today) || false;
-  const completedDays = challenge?.completedDays.length || 0;
-  const progress = (completedDays / 7) * 100;
-
-  // 生成這週的日期
-  const getWeekDates = () => {
-    if (!challenge) return [];
-    const startDate = new Date(challenge.startDate);
-    const dates: string[] = [];
-    for (let i = 0; i < 7; i++) {
-      const date = new Date(startDate);
-      date.setDate(startDate.getDate() + i);
-      dates.push(date.toISOString().split('T')[0]);
-    }
-    return dates;
-  };
-
-  const weekDates = getWeekDates();
-
-  return (
-    <motion.div
-      className="bg-gradient-to-br from-indigo-500 via-purple-500 to-pink-500 rounded-3xl shadow-2xl p-4 text-white relative overflow-hidden w-full h-[420px] flex flex-col"
-      initial={{ opacity: 0, y: 20, scale: 0.95 }}
-      animate={{ opacity: 1, y: 0, scale: 1 }}
-      transition={{ 
-        duration: 0.5, 
-        type: "spring", 
-        stiffness: 300, 
-        damping: 25 
-      }}
-      whileHover={{ y: -2 }}
-    >
-      {/* 背景裝飾 */}
-      <div className="absolute inset-0">
-        <div className="absolute top-0 right-0 w-24 h-24 bg-white/10 rounded-full -translate-y-12 translate-x-12"></div>
-        <div className="absolute bottom-0 left-0 w-16 h-16 bg-white/10 rounded-full translate-y-8 -translate-x-8"></div>
-      </div>
-
-      <div className="relative z-10 flex flex-col h-full">
-        {/* 標題區域 */}
-        <div className="flex items-center justify-between mb-4 flex-shrink-0">
-          <div className="flex items-center gap-2">
-            <div className="w-10 h-10 bg-white/20 rounded-2xl flex items-center justify-center backdrop-blur-sm">
-              <Trophy className="w-5 h-5 text-yellow-300" />
-            </div>
-            <div>
-              <h3 className="text-lg font-bold">本週挑戰</h3>
-            </div>
-          </div>
-          
-          {challenge && !editingChallenge && (
-            <div className="flex gap-2">
-              <button
-                onClick={onEdit}
-                className="p-2 bg-white/20 rounded-xl hover:bg-white/30 transition-colors backdrop-blur-sm"
-                title="編輯挑戰"
-              >
-                <Edit3 className="w-4 h-4" />
-              </button>
-                             {/* 遷移按鈕 */}
-               <button
-                 onClick={onMigrate}
-                 className="p-2 bg-yellow-400/80 text-indigo-600 rounded-xl hover:bg-yellow-400 transition-colors backdrop-blur-sm"
-                 title="遷移到新任務系統"
-               >
-                 <TrendingUp className="w-4 h-4" />
-               </button>
-            </div>
-          )}
-        </div>
-
-        {/* 挑戰內容 - 固定高度容器 */}
-        <div className="flex-1 flex flex-col justify-center min-h-[320px]">
-          {editingChallenge ? (
-            <div className="space-y-4">
-              <input
-                type="text"
-                value={challengeInput}
-                onChange={(e) => setChallengeInput(e.target.value)}
-                placeholder="輸入你的本週挑戰..."
-                className="w-full px-3 py-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl text-white placeholder-white/60 focus:ring-2 focus:ring-white/50 focus:border-transparent text-sm"
-                autoFocus
-              />
-              <div className="flex gap-2">
-                <button
-                  onClick={onSetChallenge}
-                  disabled={!challengeInput.trim()}
-                  className="flex-1 py-2 bg-white/90 text-indigo-600 rounded-xl font-bold hover:bg-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-sm"
-                >
-                  確定設定
-                </button>
-                <button
-                  onClick={() => setEditingChallenge(false)}
-                  className="px-4 py-2 bg-white/20 backdrop-blur-sm rounded-xl font-bold hover:bg-white/30 transition-colors text-sm"
-                >
-                  取消
-                </button>
-              </div>
-            </div>
-          ) : challenge ? (
-            <div className="space-y-4">
-              {/* 挑戰標題 */}
-              <div className="text-center">
-                <h4 className="text-lg font-bold mb-2 line-clamp-2">{challenge.title}</h4>
-                <div className="flex items-center justify-center gap-2">
-                  <span className="text-2xl font-black">{completedDays}</span>
-                  <span className="text-white/80">/</span>
-                  <span className="text-lg font-bold text-white/80">7</span>
-                  <span className="text-sm text-white/80 ml-1">天完成</span>
-                </div>
-              </div>
-
-              {/* 遷移提示 */}
-              {challenge.completedDays.length > 0 && (
-                <div className="mb-3 p-2 bg-yellow-400/20 border border-yellow-400/30 rounded-lg backdrop-blur-sm">
-                  <div className="flex items-center gap-2 text-xs">
-                    <TrendingUp className="w-3 h-3 text-yellow-300" />
-                    <span className="text-yellow-100">
-                      可升級為連續型任務，享受更豐富的追蹤功能！
-                    </span>
-                  </div>
-                </div>
-              )}
-
-              {/* 進度條 */}
-              <div className="space-y-3">
-                <div className="w-full bg-white/20 rounded-full h-3 backdrop-blur-sm">
-                  <motion.div
-                    className="h-3 bg-gradient-to-r from-yellow-300 to-orange-300 rounded-full shadow-lg"
-                    initial={{ width: 0 }}
-                    animate={{ width: `${progress}%` }}
-                    transition={{ duration: 0.8, ease: "easeOut" }}
-                  />
-                </div>
-                
-                {/* 週間日期標記 */}
-                <div className="flex justify-between">
-                  {weekDates.map((date, index) => {
-                    const isCompleted = challenge.completedDays.includes(date);
-                    const isToday = date === today;
-                    const dayName = ['一', '二', '三', '四', '五', '六', '日'][index];
-                    
-                    return (
-                      <div key={date} className="flex flex-col items-center">
-                        <div 
-                          className={`w-7 h-7 rounded-full flex items-center justify-center text-xs font-bold transition-all ${
-                            isCompleted 
-                              ? 'bg-yellow-300 text-indigo-600 shadow-lg' 
-                              : isToday 
-                                ? 'bg-white/30 border-2 border-white/60 text-white' 
-                                : 'bg-white/10 text-white/60'
-                          }`}
-                        >
-                          {isCompleted ? '✓' : dayName}
-                        </div>
-                        {isToday && (
-                          <div className="w-1 h-1 bg-yellow-300 rounded-full mt-1"></div>
-                        )}
-                      </div>
-                    );
-                  })}
-                </div>
-              </div>
-
-              {/* 打卡按鈕區域 */}
-              {isCheckedToday ? (
-                <div className="space-y-2">
-                  {/* 已打卡狀態 */}
-                  <div className="w-full py-3 rounded-xl font-bold text-sm bg-white/20 text-white/80 text-center border border-white/30">
-                    今日已打卡 ✓
-                  </div>
-                  
-                  {/* 取消打卡按鈕 */}
-                  {!showCancelConfirm ? (
-                    <div className="flex justify-center">
-                      <motion.button
-                        onClick={() => setShowCancelConfirm(true)}
-                        className="px-4 py-1.5 rounded-lg text-xs bg-white/10 text-white/70 hover:bg-white/20 transition-colors border border-white/20"
-                        whileTap={{ scale: 0.98 }}
-                      >
-                        取消今日打卡
-                      </motion.button>
-                    </div>
-                  ) : (
-                    <div className="space-y-2">
-                      <div className="text-center text-xs text-white/80 py-1">
-                        確定要取消今日打卡嗎？
-                      </div>
-                      <div className="flex gap-2">
-                        <motion.button
-                          onClick={() => setShowCancelConfirm(false)}
-                          className="flex-1 py-2 rounded-lg text-xs bg-white/10 text-white/70 hover:bg-white/20 transition-colors"
-                          whileHover={{ scale: 1.02 }}
-                          whileTap={{ scale: 0.98 }}
-                        >
-                          不了
-                        </motion.button>
-                        <motion.button
-                          onClick={() => {
-                            onCancelCheckIn();
-                            setShowCancelConfirm(false);
-                          }}
-                          className="flex-1 py-2 rounded-lg text-xs bg-red-400/80 text-white hover:bg-red-500/80 transition-colors"
-                          whileHover={{ scale: 1.02 }}
-                          whileTap={{ scale: 0.98 }}
-                        >
-                          確定取消
-                        </motion.button>
-                      </div>
-                    </div>
-                  )}
-                </div>
-              ) : (
-                <motion.button
-                  onClick={onCheckIn}
-                  className="w-full py-3 rounded-xl font-bold text-sm transition-all shadow-lg bg-white/90 text-indigo-600 hover:bg-white hover:scale-105 active:scale-95"
-                  whileHover={{ scale: 1.02 }}
-                  whileTap={{ scale: 0.98 }}
-                >
-                  今日打卡 🎯
-                </motion.button>
-              )}
-            </div>
-          ) : (
-            <div className="text-center space-y-4">
-              <div className="text-4xl mb-2">🎯</div>
-              <h4 className="text-lg font-bold">還沒有設定本週挑戰</h4>
-              <p className="text-white/80 text-sm mb-4">設定一個專屬於你的本週挑戰吧！</p>
-              <button
-                onClick={() => setEditingChallenge(true)}
-                className="px-6 py-2 bg-white/90 text-indigo-600 rounded-xl font-bold hover:bg-white transition-all shadow-lg hover:scale-105 text-sm"
-              >
-                立即設定
-              </button>
-            </div>
-          )}
-        </div>
-      </div>
-    </motion.div>
-  );
-};
-
-/**
- * 建立新主題卡片組件
- */
-interface CreateTopicCardProps {
-  onClick: () => void;
-  isLoading?: boolean;
-}
-
-const CreateTopicCard: React.FC<CreateTopicCardProps> = ({ onClick, isLoading }) => {
-  return (
-    <motion.div
-      className="group cursor-pointer relative"
-      onClick={onClick}
-      whileHover={{ y: -3, scale: 1.01 }}
-      whileTap={{ scale: 0.98 }}
-      transition={{ 
-        type: "spring",
-        stiffness: 400,
-        damping: 30,
-        mass: 1
-      }}
-    >
-      {isLoading && (
-        <div className="absolute inset-0 flex items-center justify-center z-10">
-          <LoadingDots />
-        </div>
-      )}
-      <div 
-        className={`bg-gradient-to-br from-emerald-50 to-teal-50 backdrop-blur-sm rounded-3xl shadow-lg border-2 border-dashed border-emerald-300 p-6 h-[320px] flex flex-col items-center justify-center transition-all duration-300 hover:shadow-2xl hover:border-emerald-400 ${
-          isLoading ? 'opacity-90' : ''
-        }`}
-        style={{ 
-          boxShadow: `0 10px 30px rgba(16, 185, 129, 0.1), 0 0 0 1px rgba(16, 185, 129, 0.1)`
-        }}
-      >
-        {/* 圖標 */}
-        <motion.div
-          className="w-24 h-24 mb-6 bg-gradient-to-br from-emerald-100 to-teal-100 rounded-full flex items-center justify-center"
-          whileHover={{ scale: 1.1 }}
-          transition={{ type: "spring", stiffness: 300, damping: 20 }}
-        >
-          <Plus className="w-12 h-12 text-emerald-600" />
-        </motion.div>
-
-        {/* 標題 */}
-        <h3 className="text-2xl font-bold text-emerald-800 mb-2 text-center">
-          建立新主題
-        </h3>
-
-        {/* 描述 */}
-        <p className="text-emerald-600 text-center mb-4 leading-relaxed">
-          從模板或空白主題開始<br />
-          你的新學習之旅
-        </p>
-
-        {/* 裝飾性圖標 */}
-        <div className="flex items-center gap-3 text-emerald-400">
-          <motion.div
-            animate={{ rotate: [0, 5, -5, 0] }}
-            transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
-          >
-            ✨
-          </motion.div>
-          <motion.div
-            animate={{ scale: [1, 1.1, 1] }}
-            transition={{ duration: 1.5, repeat: Infinity, ease: "easeInOut" }}
-          >
-            🚀
-          </motion.div>
-          <motion.div
-            animate={{ rotate: [0, -5, 5, 0] }}
-            transition={{ duration: 2.5, repeat: Infinity, ease: "easeInOut" }}
-          >
-            💡
-          </motion.div>
-        </div>
-      </div>
-    </motion.div>
-  );
-};
-
-/**
- * 週挑戰快速創建卡片組件
- */
-interface WeeklyQuickCardProps {
-  onCreateWeeklyTask: (title: string) => void;
-  isLoading?: boolean;
-  hasExistingChallenge?: boolean;
-  existingChallengeTask?: TaskWithContext;
-  onTaskClick?: (task: TaskWithContext) => void;
-  onResetChallenge?: () => void;
-}
-
-const WeeklyQuickCard: React.FC<WeeklyQuickCardProps> = ({ 
-  onCreateWeeklyTask, 
-  isLoading, 
-  hasExistingChallenge = false,
-  existingChallengeTask,
-  onTaskClick,
-  onResetChallenge
-}) => {
-  const [isEditing, setIsEditing] = useState(false);
-  const [taskTitle, setTaskTitle] = useState('');
-  const [isFlipped, setIsFlipped] = useState(false);
-  const [showResetConfirm, setShowResetConfirm] = useState(false);
-
-  // 檢查今天是否已經打卡
-  const isCheckedInToday = useMemo(() => {
-    if (!existingChallengeTask || existingChallengeTask.task_type !== 'count') {
-      return false;
-    }
-    
-    const today = new Date().toISOString().split('T')[0];
-    const checkInDates = (existingChallengeTask.progress_data as any)?.check_in_dates || [];
-    return checkInDates.includes(today);
-  }, [existingChallengeTask]);
-
-  // 獲取本週的打卡資料
-  const weeklyCheckInData = useMemo(() => {
-    if (!existingChallengeTask || existingChallengeTask.task_type !== 'count') {
-      return { checkInDates: [], weekDates: [] };
-    }
-    
-    const checkInDates = (existingChallengeTask.progress_data as any)?.check_in_dates || [];
-    
-    // 生成本週的日期
-    const cycleConfig = existingChallengeTask.cycle_config as any;
-    const weekStart = cycleConfig?.start_date || cycleConfig?.cycle_start_date;
-    
-    if (!weekStart) {
-      return { checkInDates, weekDates: [] };
-    }
-    
-    const weekDates: string[] = [];
-    const startDate = new Date(weekStart);
-    
-    for (let i = 0; i < 7; i++) {
-      const date = new Date(startDate);
-      date.setDate(startDate.getDate() + i);
-      weekDates.push(date.toISOString().split('T')[0]);
-    }
-    
-    return { checkInDates, weekDates };
-  }, [existingChallengeTask]);
 
-  // 獲取詳細的打卡時間資料（模擬從 task_actions 表獲取）
-  const checkInTimestamps = useMemo(() => {
-    if (!existingChallengeTask) return [];
-    
-    // 這裡應該從 task_actions 表獲取實際的打卡時間
-    // 目前先模擬一些數據，但保持穩定性
-    const checkInDates = (existingChallengeTask.progress_data as any)?.check_in_dates || [];
-    
-    return checkInDates.map((date: string, index: number) => {
-      // 使用日期字串作為種子，產生穩定的隨機時間
-      const dateHash = date.split('-').reduce((acc, val) => acc + parseInt(val), 0);
-      const baseHour = 8 + (dateHash + index) % 12; // 8點到19點之間
-      const minute = (dateHash * 7 + index * 13) % 60; // 穩定的分鐘數
-      
-      const dayOfWeek = new Date(date).getDay();
-      const dayName = ['週日', '週一', '週二', '週三', '週四', '週五', '週六'][dayOfWeek];
-      
-      return {
-        date,
-        time: `${baseHour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
-        dayName,
-        timestamp: new Date(`${date}T${baseHour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}:00`).getTime()
-      };
-    }).sort((a, b) => a.timestamp - b.timestamp); // 按時間排序
-  }, [existingChallengeTask]);
-
-  const handleSubmit = () => {
-    if (!taskTitle.trim()) return;
-    onCreateWeeklyTask(taskTitle.trim());
-    setTaskTitle('');
-    setIsEditing(false);
-  };
 
-  const handleKeyPress = (e: React.KeyboardEvent) => {
-    if (e.key === 'Enter') {
-      handleSubmit();
-    } else if (e.key === 'Escape') {
-      setTaskTitle('');
-      setIsEditing(false);
-    }
-  };
 
-  const handleResetChallenge = () => {
-    setShowResetConfirm(false);
-    setIsFlipped(false);
-    onResetChallenge?.();
-  };
 
-  /**
-   * 卡片翻轉動畫變體 - 統一與其他卡片的行為
-   */
-  const cardVariants = {
-    front: {
-      rotateY: 0
-    },
-    back: {
-      rotateY: 180
-    }
-  };
 
-  return (
-    <div className="relative w-full max-w-xs mx-auto h-48 overflow-hidden" style={{ perspective: '1000px' }}>
-      {isLoading && (
-        <div className="absolute inset-0 flex items-center justify-center z-10 bg-black/20 rounded-2xl">
-          <LoadingDots />
-        </div>
-      )}
-      
-      {/* 卡片容器 */}
-      <motion.div
-        className="relative w-full h-full cursor-pointer rounded-2xl shadow-lg border-0 text-white relative overflow-hidden"
-        onClick={() => {
-          if (!hasExistingChallenge && !isEditing && !showResetConfirm) {
-            setIsEditing(true);
-          } else if (hasExistingChallenge && !showResetConfirm) {
-            // 統一翻面行為：點擊卡片即可翻面
-            setIsFlipped(!isFlipped);
-          }
-        }}
-        animate={isFlipped ? "back" : "front"}
-        variants={cardVariants}
-        transition={{ duration: 0.6, ease: "easeInOut" }}
-        style={{
-          background: 'linear-gradient(135deg, rgb(99 102 241), rgb(147 51 234), rgb(236 72 153))'
-        }}
-      >
-        {/* 背景裝飾 */}
-        <div className="absolute inset-0">
-          <div className="absolute top-0 right-0 w-24 h-24 bg-white/10 rounded-full -translate-y-12 translate-x-12"></div>
-          <div className="absolute bottom-0 left-0 w-16 h-16 bg-white/10 rounded-full translate-y-8 -translate-x-8"></div>
-        </div>
 
-        <div className="relative z-10 p-4 h-full flex flex-col min-h-0">
-          {/* 根據翻轉狀態顯示不同內容 */}
-          {!isFlipped ? (
-            // 正面內容
-            <>
-              {/* 頂部：主題標籤 */}
-              <div className="mb-3">
-                <div className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-white/20 text-white">
-                  <Trophy className="w-3 h-3" />
-                  週挑戰
-                </div>
-              </div>
 
-              {/* 中間：任務標題 */}
-              <div className="flex-1 flex flex-col justify-center">
-                {hasExistingChallenge && existingChallengeTask ? (
-                  // 顯示現有挑戰任務 - 支援打卡功能
-                  <div>
-                    <div className="mb-3">
-                      <h3 className="text-lg font-bold text-white leading-tight line-clamp-2">
-                        {existingChallengeTask.title}
-                      </h3>
-                    </div>
-                    <div className="flex items-center gap-2 text-sm text-white/80 mb-3">
-                      {existingChallengeTask.task_type === 'count' && (
-                        <>
-                          <span className="text-yellow-300">🎯</span>
-                          <span>
-                            {weeklyCheckInData.checkInDates.length}/{(existingChallengeTask.task_config as any)?.target_count || 7} 次
-                          </span>
-                        </>
-                      )}
-                    </div>
-                    
-                    {/* 打卡按鈕 */}
-                    <div className="space-y-2">
-                      {isCheckedInToday ? (
-                        // 今天已打卡
-                        <div className="w-full py-2 rounded-xl font-bold text-sm bg-white/20 text-white/80 text-center border border-white/30">
-                          今天已完成 ✅
-                        </div>
-                      ) : (
-                        // 今天還沒打卡
-                        <motion.button
-                          onClick={(e) => {
-                            e.stopPropagation();
-                            // 處理任務打卡邏輯
-                            onTaskClick?.(existingChallengeTask);
-                          }}
-                          className="w-full py-2 rounded-xl font-bold text-sm transition-all shadow-lg bg-white/90 text-indigo-600 hover:bg-white hover:scale-105 active:scale-95"
-                          whileHover={{ scale: 1.02 }}
-                          whileTap={{ scale: 0.98 }}
-                          animate={isLoading ? { scale: [1, 1.05, 1] } : {}}
-                          transition={{ duration: 0.5, repeat: isLoading ? Infinity : 0 }}
-                        >
-                          今天完成了 ✨
-                        </motion.button>
-                      )}
-                    </div>
-                  </div>
-                ) : isEditing ? (
-                  // 創建新挑戰輸入界面
-                  <div className="space-y-3" onClick={(e) => e.stopPropagation()}>
-                    <input
-                      type="text"
-                      value={taskTitle}
-                      onChange={(e) => setTaskTitle(e.target.value)}
-                      onKeyDown={handleKeyPress}
-                      placeholder="輸入你的週挑戰..."
-                      className="w-full px-3 py-2 bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl text-white placeholder-white/60 focus:ring-2 focus:ring-white/50 focus:border-transparent text-sm"
-                      autoFocus
-                    />
-                    <div className="flex gap-2">
-                      <button
-                        onClick={handleSubmit}
-                        disabled={!taskTitle.trim() || isLoading}
-                        className="flex-1 py-2 bg-white/90 text-indigo-600 rounded-xl font-bold hover:bg-white transition-colors disabled:opacity-50 disabled:cursor-not-allowed text-xs"
-                      >
-                        創建挑戰
-                      </button>
-                      <button
-                        onClick={() => {
-                          setTaskTitle('');
-                          setIsEditing(false);
-                        }}
-                        className="px-3 py-2 bg-white/20 backdrop-blur-sm rounded-xl font-bold hover:bg-white/30 transition-colors text-xs"
-                      >
-                        取消
-                      </button>
-                    </div>
-                  </div>
-                ) : (
-                  // 創建新挑戰引導界面
-                  <div className="text-center">
-                    <div className="mb-2">
-                      <h3 className="text-lg font-bold text-white leading-tight">
-                        快速創建週挑戰
-                      </h3>
-                    </div>
-                    <motion.div
-                      className="text-3xl mb-2"
-                      animate={{ 
-                        rotate: [0, -5, 5, -5, 0],
-                        scale: [1, 1.1, 1]
-                      }}
-                      transition={{ 
-                        rotate: { duration: 1, repeat: Infinity, repeatDelay: 3 },
-                        scale: { duration: 0.5, repeat: Infinity, repeatDelay: 4 }
-                      }}
-                    >
-                      🎯
-                    </motion.div>
-                    <p className="text-sm text-white/80 leading-relaxed">
-                      點擊設定7天打卡挑戰
-                    </p>
-                  </div>
-                )}
-              </div>
 
-              {/* 底部：目標資訊 */}
-              <div className="mt-auto pt-2 border-t border-white/20">
-                <div className="flex items-center justify-between">
-                  <div className="flex items-center gap-1 text-xs text-white/80">
-                    <Target className="w-3 h-3" />
-                    <span className="truncate">每週挑戰目標</span>
-                  </div>
-                  {/* 7天打卡裝飾 */}
-                  <div className="flex gap-1">
-                    {weeklyCheckInData.weekDates.length > 0 ? (
-                      weeklyCheckInData.weekDates.map((date, i) => {
-                        const isChecked = weeklyCheckInData.checkInDates.includes(date);
-                        const isToday = date === new Date().toISOString().split('T')[0];
-                        
-                        return (
-                          <div
-                            key={i}
-                            className={`w-1.5 h-1.5 rounded-full transition-all ${
-                              isChecked 
-                                ? 'bg-yellow-300 shadow-sm' 
-                                : isToday 
-                                  ? 'bg-white/60 ring-1 ring-white/40' 
-                                  : 'bg-white/40'
-                            }`}
-                          />
-                        );
-                      })
-                    ) : (
-                      [...Array(7)].map((_, i) => (
-                        <div
-                          key={i}
-                          className="w-1.5 h-1.5 rounded-full bg-white/40"
-                        />
-                      ))
-                    )}
-                  </div>
-                </div>
-              </div>
 
-              {/* 狀態指示器 */}
-              {hasExistingChallenge && (
-                <div className="absolute top-2 right-2 text-lg transform hover:scale-125 transition-transform">
-                  🎯
-                </div>
-              )}
-            </>
-          ) : (
-            // 背面內容 - 詳細記錄 (反向翻轉抵消容器翻轉)
-            <div style={{ transform: 'scaleX(-1)' }}>
-              {/* 頂部：標題和操作按鈕 */}
-              {!showResetConfirm && (
-                <>
-                  <div className="mb-3 flex items-center justify-between">
-                    <div className="inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium bg-white/20 text-white">
-                      <Calendar className="w-3 h-3" />
-                      詳細記錄
-                    </div>
-                  </div>
 
-                  {/* 挑戰標題 */}
-                  <div className="mb-3">
-                    <h4 className="text-sm font-bold text-white/90 line-clamp-1">
-                      {existingChallengeTask?.title || '週挑戰'}
-                    </h4>
-                  </div>
-                </>
-              )}
 
-              {/* 打卡記錄列表 */}
-              <div className="flex-1 overflow-y-auto">
-                              {showResetConfirm ? (
-                <div className="flex flex-col items-center justify-center h-full space-y-4">
-                  <div className="text-center space-y-2">
-                    <div className="text-2xl">⚠️</div>
-                    <div className="space-y-1">
-                      <p className="text-sm font-medium text-white">重新設定挑戰</p>
-                      <p className="text-xs text-white/80">會清空所有進度</p>
-                    </div>
-                  </div>
-                  <div className="flex gap-2 w-full">
-                    <button
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        setShowResetConfirm(false);
-                      }}
-                      className="flex-1 py-2 px-3 bg-white/20 rounded-lg text-xs hover:bg-white/30 transition-colors"
-                    >
-                      取消
-                    </button>
-                    <button
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        handleResetChallenge();
-                      }}
-                      className="flex-1 py-2 px-3 bg-red-500/80 rounded-lg text-xs hover:bg-red-500 transition-colors"
-                    >
-                      確定重設
-                    </button>
-                  </div>
-                </div>
-                ) : checkInTimestamps.length > 0 ? (
-                  <div className="space-y-2">
-                    {checkInTimestamps.map((record, index) => (
-                      <motion.div
-                        key={record.date}
-                        className="flex items-center justify-between p-2 bg-white/10 rounded-lg"
-                        initial={{ opacity: 0, x: -20 }}
-                        animate={{ opacity: 1, x: 0 }}
-                        transition={{ delay: index * 0.1 }}
-                      >
-                        <div className="flex items-center gap-2">
-                          <div className="w-2 h-2 bg-green-400 rounded-full"></div>
-                          <span className="text-xs font-medium">{record.dayName}</span>
-                        </div>
-                        <div className="text-right">
-                          <div className="text-xs text-white/90">
-                            {new Date(record.date).toLocaleDateString('zh-TW', { 
-                              month: 'short', 
-                              day: 'numeric' 
-                            })}
-                          </div>
-                          <div className="text-xs text-white/70">
-                            {record.time}
-                          </div>
-                        </div>
-                      </motion.div>
-                    ))}
-                  </div>
-                ) : (
-                  <div className="flex flex-col items-center justify-center h-full text-center">
-                    <div className="text-2xl mb-2">📝</div>
-                    <p className="text-sm text-white/70">還沒有打卡記錄</p>
-                    <p className="text-xs text-white/50">完成任務後會顯示在這裡</p>
-                  </div>
-                )}
-              </div>
 
-                            {/* 底部：統計資訊和重置按鈕 */}
-              {!showResetConfirm && (
-                <div className="mt-3 pt-2 border-t border-white/20">
-                  <div className="flex items-center justify-between text-xs text-white/80">
-                    <span>已完成 {checkInTimestamps.length}/7 次</span>
-                    <button
-                      onClick={(e) => {
-                        e.stopPropagation();
-                        setShowResetConfirm(true);
-                      }}
-                      className="p-1.5 bg-white/20 rounded-lg hover:bg-white/30 transition-colors"
-                      title="重置週挑戰"
-                    >
-                      <RotateCcw className="w-3 h-3" />
-                    </button>
-                  </div>
-                </div>
-              )}
-              </div>
-            )}
-        </div>
-      </motion.div>
-    </div>
-  );
-};
 
 export const TaskWallPage = () => {
   const [isLoading, setIsLoading] = useState(true);
@@ -1571,47 +155,9 @@ export const TaskWallPage = () => {
   const [showHistoryDialog, setShowHistoryDialog] = useState(false);
   const [selectedTaskForHistory, setSelectedTaskForHistory] = useState<TaskWithContext | null>(null);
   
-  // 本週挑戰相關狀態
-  const [weeklyChallenge, setWeeklyChallenge] = useState<{
-    title: string;
-    completedDays: string[];
-    startDate: string;
-  } | null>(null);
-  const [editingChallenge, setEditingChallenge] = useState(false);
-  const [challengeInput, setChallengeInput] = useState('');
-
-  // 獲取台灣時間的日期字串 (UTC+8)
-  const getTaiwanDateString = () => {
-    const now = new Date();
-    const taiwanTime = new Date(now.getTime() + (8 * 60 * 60 * 1000));
-    return taiwanTime.toISOString().split('T')[0];
-  };
 
-  // 獲取本週的開始日期 (週一)
-  const getWeekStart = (date: string) => {
-    const d = new Date(date);
-    const day = d.getDay();
-    const diff = d.getDate() - day + (day === 0 ? -6 : 1);
-    return new Date(d.setDate(diff)).toISOString().split('T')[0];
-  };
 
-  // 初始化本週挑戰數據
-  useEffect(() => {
-    const savedChallenge = localStorage.getItem('weeklyChallenge');
-    const currentWeekStart = getWeekStart(getTaiwanDateString());
-    
-    if (savedChallenge) {
-      const challenge = JSON.parse(savedChallenge);
-      // 檢查是否是本週的挑戰
-      if (challenge.startDate === currentWeekStart) {
-        setWeeklyChallenge(challenge);
-      } else {
-        // 新的一週，清除舊挑戰
-        localStorage.removeItem('weeklyChallenge');
-        setWeeklyChallenge(null);
-      }
-    }
-  }, []);
+
 
   // 初始化資料載入
   useEffect(() => {
@@ -2128,11 +674,29 @@ export const TaskWallPage = () => {
   }, [topics]);
 
   /**
-   * 只顯示任務卡片
+   * 整合所有卡片（包括週挑戰任務）
    */
   const allCards = useMemo(() => {
-    return filteredTasks.map(task => ({ type: 'task' as const, data: task }));
-  }, [filteredTasks]);
+    const taskCards = filteredTasks.map(task => ({ 
+      type: 'task' as const, 
+      data: task,
+      highlight: false
+    }));
+    
+    // 如果有週挑戰任務，加入到卡片列表的開頭並標記為 highlight
+    if (weeklyQuickChallengeInfo.challengeTask) {
+      const weeklyCard = {
+        type: 'task' as const,
+        data: weeklyQuickChallengeInfo.challengeTask,
+        highlight: true
+      };
+      
+      // 週挑戰卡片放在最前面
+      return [weeklyCard, ...taskCards];
+    }
+    
+    return taskCards;
+  }, [filteredTasks, weeklyQuickChallengeInfo.challengeTask]);
 
   /**
    * 處理主題數據，計算各種統計資訊
@@ -2243,112 +807,11 @@ export const TaskWallPage = () => {
     setShowHistoryDialog(true);
   }, []);
 
-  // 處理設定週挑戰
-  const handleSetChallenge = useCallback(() => {
-    if (!challengeInput.trim()) return;
-    
-    const currentWeekStart = getWeekStart(getTaiwanDateString());
-    const newChallenge = {
-      title: challengeInput.trim(),
-      completedDays: [],
-      startDate: currentWeekStart
-    };
-    
-    setWeeklyChallenge(newChallenge);
-    localStorage.setItem('weeklyChallenge', JSON.stringify(newChallenge));
-    setChallengeInput('');
-    setEditingChallenge(false);
-    
-    toast.success('本週挑戰設定成功！🎯', {
-      duration: 3000,
-      style: {
-        background: '#10B981',
-        color: 'white',
-        borderRadius: '12px'
-      }
-    });
-  }, [challengeInput]);
 
-  // 處理挑戰打卡
-  const handleChallengeCheckIn = useCallback(() => {
-    if (!weeklyChallenge) return;
-    
-    const today = getTaiwanDateString();
-    const isAlreadyChecked = weeklyChallenge.completedDays.includes(today);
-    
-    if (isAlreadyChecked) {
-      toast.error('今天已經打過卡了！明天再來吧 😊');
-      return;
-    }
-    
-    const updatedChallenge = {
-      ...weeklyChallenge,
-      completedDays: [...weeklyChallenge.completedDays, today]
-    };
-    
-    setWeeklyChallenge(updatedChallenge);
-    localStorage.setItem('weeklyChallenge', JSON.stringify(updatedChallenge));
-    
-    // 檢查是否完成本週挑戰
-    if (updatedChallenge.completedDays.length === 7) {
-      toast.success('🎉 恭喜完成本週挑戰！你太棒了！', {
-        duration: 5000,
-        style: {
-          background: 'linear-gradient(45deg, #FF6B6B, #4ECDC4)',
-          color: 'white',
-          borderRadius: '12px',
-          fontWeight: '600'
-        }
-      });
-    } else {
-      toast.success(`✨ 打卡成功！已完成 ${updatedChallenge.completedDays.length}/7 天`, {
-        duration: 3000,
-        style: {
-          background: '#10B981',
-          color: 'white',
-          borderRadius: '12px'
-        }
-      });
-    }
-  }, [weeklyChallenge]);
 
-  // 處理編輯挑戰
-  const handleEditChallenge = useCallback(() => {
-    if (weeklyChallenge) {
-      setChallengeInput(weeklyChallenge.title);
-    }
-    setEditingChallenge(true);
-  }, [weeklyChallenge]);
 
-  // 處理取消打卡
-  const handleCancelCheckIn = useCallback(() => {
-    if (!weeklyChallenge) return;
-    
-    const today = getTaiwanDateString();
-    const isAlreadyChecked = weeklyChallenge.completedDays.includes(today);
-    
-    if (!isAlreadyChecked) {
-      toast.error('今天還沒有打卡記錄');
-      return;
-    }
-    
-    const updatedChallenge = {
-      ...weeklyChallenge,
-      completedDays: weeklyChallenge.completedDays.filter(date => date !== today)
-    };
-    
-    setWeeklyChallenge(updatedChallenge);
-    localStorage.setItem('weeklyChallenge', JSON.stringify(updatedChallenge));
-    
-    toast.success('已取消今日打卡', {
-      duration: 3000,
-      style: {
-        background: '#64748B',
-        color: 'white',
-        borderRadius: '12px'
-      }
-    });
-  }, [weeklyChallenge]);
+
+
 
   /**
    * 快速創建週循環任務
@@ -2463,161 +926,9 @@ export const TaskWallPage = () => {
     }
   }, [currentUser, topics, createTopic, addGoal, addTask, fetchTopics]);
 
-  /**
-   * 重新設定週挑戰
-   */
-  const handleResetWeeklyChallenge = useCallback(async () => {
-    if (!weeklyQuickChallengeInfo.challengeTask || !currentUser) return;
-
-    try {
-      const task = weeklyQuickChallengeInfo.challengeTask;
-      
-      // 刪除現有的週挑戰任務
-      const deleteSuccess = await deleteTask(task.id);
-      
-      if (!deleteSuccess) {
-        toast.error('刪除任務失敗');
-        return;
-      }
-
-      // 刷新數據，讓 WeeklyQuickCard 回到創建狀態
-      await fetchTopics();
-      
-      toast.success('週挑戰已清除！可以重新創建新的挑戰 🔄', {
-        duration: 3000,
-        style: {
-          background: '#10B981',
-          color: 'white',
-          borderRadius: '12px',
-          fontWeight: '600'
-        }
-      });
-    } catch (error) {
-      console.error('重設週挑戰失敗:', error);
-      toast.error('重設失敗，請稍後再試');
-    }
-  }, [weeklyQuickChallengeInfo.challengeTask, currentUser, deleteTask, fetchTopics]);
 
-  /**
-   * 遷移週挑戰到新的任務結構
-   */
-  const migrateWeeklyChallengeToTask = useCallback(async () => {
-    if (!weeklyChallenge || !currentUser) return;
 
-    try {
-      // 找到或創建"個人習慣"主題
-      let habitTopic = topics?.find(topic => topic.title === '個人習慣' && topic.subject === '生活');
-      
-      if (!habitTopic) {
-        // 創建個人習慣主題（隱藏主題，不在主題牆顯示）
-        const newTopic = await createTopic({
-          title: '個人習慣',
-          description: '培養良好的日常習慣',
-          subject: '生活',
-          status: 'hidden', // 使用 hidden 狀態來隱藏主題
-          is_collaborative: false,
-          show_avatars: false
-        });
-        
-        if (!newTopic) {
-          toast.error('創建習慣主題失敗');
-          return;
-        }
-        habitTopic = newTopic;
-      }
 
-      // 找到或創建"每週挑戰"目標
-      let challengeGoal = habitTopic.goals?.find(goal => goal.title === '每週挑戰');
-      
-      if (!challengeGoal) {
-        const newGoal = await addGoal(habitTopic.id, {
-          title: '每週挑戰',
-          description: '堅持完成本週設定的挑戰',
-          status: 'todo',
-          priority: 'high',
-          order_index: 0
-        });
-        
-        if (!newGoal) {
-          toast.error('創建挑戰目標失敗');
-          return;
-        }
-        challengeGoal = newGoal;
-      }
-
-      // 創建計數型任務（遷移週挑戰）
-      const weekStart = getWeekStart(getTaiwanDateString());
-      const weekEnd = new Date(weekStart);
-      weekEnd.setDate(weekEnd.getDate() + 6);
-
-      const taskConfig = {
-        type: 'count' as const,
-        target_count: 7,
-        current_count: weeklyChallenge.completedDays.length,
-        reset_frequency: 'weekly' as const // 每週重置
-      };
-
-      const cycleConfig = {
-        cycle_type: 'weekly' as const,
-        start_date: weekStart,
-        deadline: weekEnd.toISOString().split('T')[0],
-        auto_reset: true
-      };
-
-      const progressData = {
-        last_updated: new Date().toISOString(),
-        completion_percentage: (weeklyChallenge.completedDays.length / 7) * 100,
-        check_in_dates: weeklyChallenge.completedDays,
-        current_count: weeklyChallenge.completedDays.length,
-        target_count: 7
-      };
-
-      const newTask = await addTask(challengeGoal.id, {
-        title: weeklyChallenge.title,
-        description: `本週挑戰：${weeklyChallenge.title}`,
-        task_type: 'count',
-        task_config: taskConfig,
-        cycle_config: cycleConfig,
-        progress_data: progressData,
-        status: 'in_progress',
-        priority: 'high',
-        order_index: 0,
-        need_help: false,
-        special_flags: [SPECIAL_TASK_FLAGS.WEEKLY_QUICK_CHALLENGE]
-      });
-
-      if (newTask) {
-        // 清除舊的 localStorage 數據
-        localStorage.removeItem('weeklyChallenge');
-        setWeeklyChallenge(null);
-        
-        // 刷新頁面數據
-        await fetchTopics();
-        
-        toast.success('週挑戰已成功遷移到任務系統！🎉', {
-          duration: 5000,
-          style: {
-            background: '#10B981',
-            color: 'white',
-            borderRadius: '12px',
-            fontWeight: '600'
-          }
-        });
-      } else {
-        toast.error('遷移任務失敗');
-      }
-    } catch (error) {
-      console.error('遷移週挑戰失敗:', error);
-      toast.error('遷移失敗，請稍後再試');
-    }
-  }, [weeklyChallenge, currentUser, topics, createTopic, addGoal, addTask, fetchTopics]);
-
-  /**
-   * 檢查是否需要提示用戶遷移週挑戰
-   */
-  const shouldShowMigrationPrompt = useMemo(() => {
-    return weeklyChallenge && weeklyChallenge.completedDays.length > 0;
-  }, [weeklyChallenge]);
 
   // 載入狀態
   if (loading) {
@@ -2787,53 +1098,6 @@ export const TaskWallPage = () => {
                   onRecordSuccess={handleRecordSuccess}
                   currentUserId={currentUser?.id}
                   isLoading={isLoading}
-                  weeklyQuickCard={
-                    <WeeklyQuickCard
-                      onCreateWeeklyTask={handleCreateWeeklyTask}
-                      isLoading={isCreatingWeeklyTask}
-                      hasExistingChallenge={weeklyQuickChallengeInfo.hasChallenge}
-                      existingChallengeTask={weeklyQuickChallengeInfo.challengeTask}
-                      onResetChallenge={handleResetWeeklyChallenge}
-                      onTaskClick={async (task) => {
-                        // 處理週挑戰任務的打卡邏輯
-                        if (task.task_type === 'count') {
-                          try {
-                            // 使用 performTaskAction 記錄動作
-                            const result = await performTaskAction(task.id, 'check_in');
-                            
-                            if (result.success) {
-                              // 觸發星星動畫
-                              setIsStarAnimating(true);
-                              setTimeout(() => setIsStarAnimating(false), 1000);
-                              
-                              // 顯示成功訊息
-                              const checkInDates = (result.task?.progress_data as any)?.check_in_dates || [];
-                              const targetCount = (result.task?.task_config as any)?.target_count || 7;
-                              toast.success(`今天完成了！進度 ${checkInDates.length}/${targetCount} 次 🎉`, {
-                                duration: 3000,
-                                style: {
-                                  background: '#10B981',
-                                  color: 'white',
-                                  borderRadius: '12px',
-                                  fontWeight: '600'
-                                }
-                              });
-                              
-                              // 刷新數據
-                              await fetchTopics();
-                            } else {
-                              // 顯示錯誤訊息
-                              const errorMessage = 'message' in result ? result.message : '打卡失敗';
-                              toast.error(errorMessage);
-                            }
-                          } catch (error) {
-                            console.error('週挑戰打卡失敗:', error);
-                            toast.error('打卡失敗，請稍後再試');
-                          }
-                        }
-                      }}
-                    />
-                  }
                 />
               )}
             </div>
